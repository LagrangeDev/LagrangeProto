syntax = "proto2";

package service.highway.v2;

message ReqDataHighwayHead {
  optional DataHighwayHead msg_base_head = 1;
  optional SegHead msg_seg_head = 2;
  optional bytes bytes_req_extend_info = 3;
  optional uint64 timestamp = 4;
  optional LoginSigHead msg_login_sig_head = 5;
}

message RespDataHighwayHead {
  optional DataHighwayHead msg_base_head = 1;
  optional SegHead msg_seg_head = 2;
  optional uint32 error_code = 3;
  optional uint32 allow_retry = 4;
  optional uint32 cache_cost = 5;
  optional uint32 ht_cost = 6;
  optional bytes bytes_rsp_extend_info = 7;
  optional uint64 timestamp = 8;
  optional uint64 range = 9;
  optional uint32 is_reset = 10;
}

message DataHighwayHead {
  optional uint32 version = 1;
  optional string uin = 2;
  optional string command = 3;
  optional uint32 seq = 4;
  optional uint32 retry_times = 5;
  optional uint32 app_id = 6;
  optional uint32 data_flag = 7;
  optional uint32 command_id = 8;
  optional bytes build_ver = 9;
}

message LoginSigHead {
  optional uint32 uint32_login_sig_type = 1;
  optional bytes bytes_login_sig = 2;
  optional uint32 app_id = 3;
}

message SegHead {
  optional uint32 service_id = 1;
  optional uint64 filesize = 2;
  optional uint64 data_offset = 3;
  optional uint32 data_length = 4;
  optional uint32 ret_code = 5;
  optional bytes service_ticket = 6;
  optional bytes md5 = 8;
  optional bytes file_md5 = 9;
  optional uint32 cache_addr = 10;
  optional uint32 cache_port = 13;
}

message NTV2RichMediaHighwayExt {
  optional string file_uuid = 1;
  optional string u_key = 2;
  optional NTHighwayNetwork network = 5;
  repeated MsgInfoBody msg_info_body = 6;
  optional uint32 block_size = 10;
  optional NTHighwayHash hash = 11;
}

message NTHighwayHash {
  repeated bytes file_sha1 = 1;
}

message NTHighwayNetwork {
  repeated NTHighwayIPv4 i_pv4s = 1;
}

message NTHighwayIPv4 {
  optional NTHighwayDomain domain = 1;
  optional uint32 port = 2;
}

message NTHighwayDomain {
  optional bool is_enable = 1;
  optional string ip = 2;
}

message NTV2RichMediaReq {
  optional MultiMediaReqHead req_head = 1;
  optional UploadReq upload = 2;
  optional DownloadReq download = 3;
  optional DownloadRKeyReq download_r_key = 4;
  optional DeleteReq delete = 5;
  optional UploadCompletedReq upload_completed = 6;
  optional MsgInfoAuthReq msg_info_auth = 7;
  optional UploadKeyRenewalReq upload_key_renewal = 8;
  optional DownloadSafeReq download_safe = 9;
  optional bytes extension = 99;
}

message MultiMediaReqHead {
  optional CommonHead common = 1;
  optional SceneInfo scene = 2;
  optional ClientMeta client = 3;
}

message CommonHead {
  optional uint32 request_id = 1;
  optional uint32 command = 2;
}

message SceneInfo {
  optional uint32 request_type = 101;
  optional uint32 business_type = 102;
  optional uint32 scene_type = 200;
  optional C2CUserInfo c2_c = 201;
  optional GroupInfo group = 202;
}

message C2CUserInfo {
  optional uint32 account_type = 1;
  optional string target_uid = 2;
}

message GroupInfo {
  optional int64 group_uin = 1;
}

message ClientMeta {
  optional uint32 agent_type = 1;
}

message DownloadReq {
  optional IndexNode node = 1;
  optional DownloadExt download = 2;
}

message IndexNode {
  optional FileInfo info = 1;
  optional string file_uuid = 2;
  optional uint32 store_id = 3;
  optional uint32 upload_time = 4;
  optional uint32 ttl = 5;
  optional uint32 sub_type = 6;
}

message FileInfo {
  optional uint32 file_size = 1;
  optional string file_hash = 2;
  optional string file_sha1 = 3;
  optional string file_name = 4;
  optional FileType type = 5;
  optional uint32 width = 6;
  optional uint32 height = 7;
  optional uint32 time = 8;
  optional uint32 original = 9;
}

message FileType {
  optional uint32 type = 1;
  optional uint32 pic_format = 2;
  optional uint32 video_format = 3;
  optional uint32 voice_format = 4;
}

message DownloadExt {
  optional PicDownloadExt pic = 1;
  optional VideoDownloadExt video = 2;
  optional PttDownloadExt ptt = 3;
}

message VideoDownloadExt {
  optional uint32 busi_type = 1;
  optional uint32 scene_type = 2;
  optional uint32 sub_busi_type = 3;
}

message PicDownloadExt {}

message PttDownloadExt {}

message PicUrlExtInfo {
  optional string original_parameter = 1;
  optional string big_parameter = 2;
  optional string thumb_parameter = 3;
}

message VideoExtInfo {
  optional uint32 video_codec_format = 1;
}

message MsgInfo {
  repeated MsgInfoBody msg_info_body = 1;
  optional ExtBizInfo ext_biz_info = 2;
}

message MsgInfoBody {
  optional IndexNode index = 1;
  optional PictureInfo picture = 2;
  optional VideoInfo video = 3;
  optional AudioInfo audio = 4;
  optional bool file_exist = 5;
  optional HashSum hash_sum = 6;
}

message HashSum {
  optional C2cSource bytes_pb_reserve_c2c = 201;
  optional TroopSource troop_source = 202;
}

message C2cSource {
  optional string friend_uid = 2;
}

message TroopSource {
  optional uint32 group_uin = 1;
}

message VideoInfo {}

message AudioInfo {}

message PictureInfo {
  optional string url_path = 1;
  optional PicUrlExtInfo ext = 2;
  optional string domain = 3;
}

message ExtBizInfo {
  optional PicExtBizInfo pic = 1;
  optional VideoExtBizInfo video = 2;
  optional PttExtBizInfo ptt = 3;
  optional uint32 busi_type = 10;
}

message PttExtBizInfo {
  optional uint64 src_uin = 1;
  optional uint32 ptt_scene = 2;
  optional uint32 ptt_type = 3;
  optional uint32 change_voice = 4;
  optional bytes waveform = 5;
  optional uint32 auto_convert_text = 6;
  optional bytes bytes_reserve = 11;
  optional bytes bytes_pb_reserve = 12;
  optional bytes bytes_general_flags = 13;
}

message VideoExtBizInfo {
  optional uint32 from_scene = 1;
  optional uint32 to_scene = 2;
  optional bytes bytes_pb_reserve = 3;
}

message PicExtBizInfo {
  optional uint32 biz_type = 1;
  optional string text_summary = 2;
  optional bytes bytes_pb_reserve_c2c = 11;
  optional bytes bytes_pb_reserve_troop = 12;
  optional uint32 from_scene = 1001;
  optional uint32 to_scene = 1002;
  optional uint32 old_file_id = 1003;
}

message DownloadSafeReq {
  optional IndexNode index = 1;
}

message UploadKeyRenewalReq {
  optional string old_u_key = 1;
  optional uint32 sub_type = 2;
}

message MsgInfoAuthReq {
  optional bytes msg = 1;
  optional uint64 auth_time = 2;
}

message UploadCompletedReq {
  optional bool srv_send_msg = 1;
  optional uint64 client_random_id = 2;
  optional MsgInfo msg_info = 3;
  optional uint32 client_seq = 4;
}

message DeleteReq {
  repeated IndexNode index = 1;
  optional bool need_recall_msg = 2;
  optional uint64 msg_seq = 3;
  optional uint64 msg_random = 4;
  optional uint64 msg_time = 5;
}

message DownloadRKeyReq {
  repeated int32 types = 1;
}

message UploadInfo {
  optional FileInfo file_info = 1;
  optional uint32 sub_file_type = 2;
}

message UploadReq {
  repeated UploadInfo upload_info = 1;
  optional bool try_fast_upload_completed = 2;
  optional bool srv_send_msg = 3;
  optional uint64 client_random_id = 4;
  optional uint32 compat_q_msg_scene_type = 5;
  optional ExtBizInfo ext_biz_info = 6;
  optional uint32 client_seq = 7;
  optional bool no_need_compat_msg = 8;
}

message NTV2RichMediaResp {
  optional MultiMediaRespHead resp_head = 1;
  optional UploadResp upload = 2;
  optional DownloadResp download = 3;
  optional DownloadRKeyResp download_r_key = 4;
  optional DeleteResp delete = 5;
  optional UploadCompletedResp upload_completed = 6;
  optional MsgInfoAuthResp msg_info_auth = 7;
  optional UploadKeyRenewalResp upload_key_renewal = 8;
  optional DownloadSafeResp download_safe = 9;
  optional bytes extension = 99;
}

message MultiMediaRespHead {
  optional CommonHead common = 1;
  optional uint32 ret_code = 2;
  optional string message = 3;
}

message DownloadResp {
  optional string r_key_param = 1;
  optional uint32 r_key_ttl_second = 2;
  optional DownloadInfo info = 3;
  optional uint32 r_key_create_time = 4;
}

message DownloadInfo {
  optional string domain = 1;
  optional string url_path = 2;
  optional uint32 https_port = 3;
  repeated IPv4 i_pv4s = 4;
  repeated IPv6 i_pv6s = 5;
  optional PicUrlExtInfo pic_url_ext_info = 6;
  optional VideoExtInfo video_ext_info = 7;
}

message IPv4 {
  optional uint32 out_ip = 1;
  optional uint32 out_port = 2;
  optional uint32 in_ip = 3;
  optional uint32 in_port = 4;
  optional uint32 ip_type = 5;
}

message IPv6 {
  optional bytes out_ip = 1;
  optional uint32 out_port = 2;
  optional bytes in_ip = 3;
  optional uint32 in_port = 4;
  optional uint32 ip_type = 5;
}

message UploadResp {
  optional string u_key = 1;
  optional uint32 u_key_ttl_second = 2;
  repeated IPv4 i_pv4s = 3;
  repeated IPv6 i_pv6s = 4;
  optional uint64 msg_seq = 5;
  optional MsgInfo msg_info = 6;
  repeated RichMediaStorageTransInfo ext = 7;
  optional bytes compat_q_msg = 8;
  repeated SubFileInfo sub_file_infos = 10;
}

message RichMediaStorageTransInfo {
  optional uint32 sub_type = 1;
  optional uint32 ext_type = 2;
  optional bytes ext_value = 3;
}

message SubFileInfo {
  optional uint32 sub_type = 1;
  optional string u_key = 2;
  optional uint32 u_key_ttl_second = 3;
  repeated IPv4 i_pv4s = 4;
  repeated IPv6 i_pv6s = 5;
}

message DownloadSafeResp {}

message UploadKeyRenewalResp {
  optional string ukey = 1;
  optional uint64 ukey_ttl_sec = 2;
}

message MsgInfoAuthResp {
  optional uint32 auth_code = 1;
  optional bytes msg = 2;
  optional uint64 result_time = 3;
}

message UploadCompletedResp {
  optional uint64 msg_seq = 1;
}

message DeleteResp {}

message DownloadRKeyResp {
  repeated RKeyInfo r_keys = 1;
}

message RKeyInfo {
  optional string rkey = 1;
  optional uint64 rkey_ttl_sec = 2;
  optional uint32 store_id = 3;
  optional uint32 rkey_create_time = 4;
  optional uint32 type = 5;
}

message OfflineFileUploadRequest {
  optional uint32 command = 1;
  optional int32 seq = 2;
  optional ApplyUploadReqV3 upload = 19;
  optional int32 business_id = 101;
  optional int32 client_type = 102;
  optional int32 flag_support_media_platform = 200;
}

message ApplyUploadReqV3 {
  optional string sender_uid = 10;
  optional string receiver_uid = 20;
  optional uint32 file_size = 30;
  optional string file_name = 40;
  optional bytes md510_m_check_sum = 50;
  optional bytes sha1_check_sum = 60;
  optional string local_path = 70;
  optional bytes md5_check_sum = 110;
  optional bytes sha3_check_sum = 120;
}

message OfflineFileUploadResponse {
  optional uint32 command = 1;
  optional int32 seq = 2;
  optional ApplyUploadRespV3 upload = 19;
  optional int32 business_id = 101;
  optional int32 client_type = 102;
  optional int32 flag_support_media_platform = 200;
}

message ApplyUploadRespV3 {
  optional int32 ret_code = 10;
  optional string ret_msg = 20;
  optional int64 total_space = 30;
  optional int64 used_space = 40;
  optional int64 uploaded_size = 50;
  optional string upload_ip = 60;
  optional string upload_domain = 70;
  optional uint32 upload_port = 80;
  optional string uuid = 90;
  optional bytes upload_key = 100;
  optional bool bool_file_exist = 110;
  optional int32 pack_size = 120;
  repeated string upload_ip_list = 130;
  optional int32 upload_https_port = 140;
  optional string upload_https_domain = 150;
  optional string upload_dns = 160;
  optional string upload_lanip = 170;
  optional string file_id_crc = 200;
  repeated Addr rtp_media_platform_upload_address = 210;
  optional bytes media_platform_upload_key = 220;
}

message Addr {
  optional uint32 out_ip = 1;
  optional uint32 out_port = 2;
  optional uint32 inner_ip = 3;
  optional uint32 inner_port = 4;
  optional uint32 ip_type = 5;
}

message FileUploadExt {
  optional int32 unknown1 = 1;
  optional int32 unknown2 = 2;
  optional int32 unknown3 = 3;
  optional FileUploadEntry entry = 100;
  optional int32 unknown200 = 200;
}

message FileUploadEntry {
  optional ExcitingBusiInfo busi_buff = 100;
  optional ExcitingFileEntry file_entry = 200;
  optional ExcitingClientInfo client_info = 300;
  optional ExcitingFileNameInfo file_name_info = 400;
  optional ExcitingHostConfig host = 500;
}

message ExcitingBusiInfo {
  optional int32 bus_id = 1;
  optional int64 sender_uin = 100;
  optional int64 receiver_uin = 200;
  optional int64 group_code = 400;
}

message ExcitingFileEntry {
  optional int64 file_size = 100;
  optional bytes md5 = 200;
  optional bytes check_key = 300;
  optional bytes md510_m = 400;
  optional bytes sha3 = 500;
  optional string file_id = 600;
  optional bytes upload_key = 700;
}

message ExcitingClientInfo {
  optional int32 client_type = 100;
  optional string app_id = 200;
  optional int32 terminal_type = 300;
  optional string client_ver = 400;
  optional int32 unknown = 600;
}

message ExcitingFileNameInfo {
  optional string file_name = 100;
}

message ExcitingHostConfig {
  repeated ExcitingHostInfo hosts = 200;
}

message ExcitingHostInfo {
  optional ExcitingUrlInfo url = 1;
  optional uint32 port = 2;
}

message ExcitingUrlInfo {
  optional int32 unknown = 1;
  optional string host = 2;
}
